(defun same-symbol (x y) (eq x y))
(defun is-const (exp) (numberp exp))
(defun is-var (exp) (symbolp exp))

(defun is-sum (exp) (eq (car exp) '+))
(defun summand (exp) (cadr exp))
(defun summend (exp) (caddr exp))
(defun make-sum (summand summend)
  (cond ((equal 0 summand) summend)
        ((equal 0 summend) summand)
        (t (list '+ summand summend))))

(defun is-prod (exp) (eq (car exp) '*))
(defun prodand (exp) (cadr exp))
(defun prodend (exp) (caddr exp))
(defun make-prod (f1 f2)
  (cond ((or (equal 0 f1) (equal 0 f2)) 0)
        ((equal 1 f1) f2)
        ((equal 1 f2) f1)
        (t (list '* f1 f2))))

(defun is-expt (exp) (eq (car exp) '**))
(defun base (exp) (cadr exp))
(defun expo (exp) (caddr exp))
(defun make-expt (base expo)
  (cond ((equal expo 0) 1)
        ((equal expo 1) base)
        (t (list '** base expo))))

(defun derive-exp (exp var)
  (cond ((is-const exp) 0)
        ((is-var exp) (if (same-symbol exp var) 1 0))
        ((is-sum exp) (make-sum (derive-exp (summand exp) var) (derive-exp (summend exp) var)))
        ((is-prod exp)
         (let ((f1 (prodand exp)) (f2 (prodend exp)))
           (make-sum (make-prod f1 (derive-exp f2 var)) (make-prod f2 (derive-exp f1 var)))))
        ((is-expt exp)
         (let ((base (base exp)) (expo (expo exp)))
           (make-prod expo (make-expt base (make-sum expo -1)))))))
