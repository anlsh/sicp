(defun element-of-set? (x set)
    (cond ((null set) nil)
          ((= x (car set)) t)
          ((< x (car set)) nil)
          (t (element-of-set? x (cdr set)))))

(defun intersection-set (set1 set2)
    (if (or (null set1) (null set2))
        '()
        (let ((x1 (car set1)) (x2 (car set2)))
          (cond ((= x1 x2)
                 (cons x1 (intersection-set (cdr set1)
                                            (cdr set2))))
                ((< x1 x2)
                 (intersection-set (cdr set1) set2))
                ((< x2 x1)
                 (intersection-set set1 (cdr set2)))))))

;; Solution
(defun adjoin-set (el set)
  (cond ((null set) (list el))
        ((> el (car set)) (cons (car set) (adjoin-set el (cdr set))))
        ((= el (car set)) set)
        ((< el (car set)) (cons el set))))
